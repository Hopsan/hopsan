#Determine debug extension, and debug output on/off
CONFIG(debug, debug|release) {
    DEBUG_EXT = _d
    DEFINES *= DEBUGCOMPILING
} else {
    DEBUG_EXT =
    DEFINES *= QT_NO_DEBUG_OUTPUT
    DEFINES *= RELEASECOMPILING
}
#Add a defined value with the debug extension (that can be used in the code)
DEFINES *= DEBUG_EXT=$${DEBUG_EXT}

#Determine the dynamic link library file extension, typically .dll for Windows, .so for UNIX and .dylib for OSX
win32:DLL_EXT = .dll
unix:DLL_EXT = .so
macx:DLL_EXT = .dylib

#Add a defined value with the dll extension (that can be used in the code)
DEFINES *= DLL_EXT=$${DLL_EXT}

#Define the lib prefix for the different platforms, (not you can NOT change the prefix here)
unix:LIB_PREFIX = lib
win32:LIB_PREFIX =
macx:LIB_PREFIX = lib
DEFINES *= DLL_PREFIX=$${LIB_PREFIX}

# Set optimization flags
# Og = optimization that does not interfere with debugging
# O3 = highest optimization level for speed
CONFIG(debug, debug|release) {
  #QMAKE_CXXFLAGS += -Og
}
CONFIG(release, debug|release) {
  QMAKE_CXXFLAGS += -O3
}

#Determine if default component lib should be build in
#DEFINES *= HOPSAN_INTERNALDEFAULTCOMPONENTS

#Help function to select one of multiple choice paths to include
defineReplace(selectPath){
    PATH = $$1
    DEFAULT_PATHS = $$2
    NAME = $$3

    !exists($${PATH}) {
        !isEmpty(PATH) {
            !build_pass:message("The custom $${NAME} path $${PATH} does not exist!")
        }
        #Clear the path in case it containes rubish
        PATH =
        for(path,DEFAULT_PATHS){
            isEmpty(PATH):exists($${path}){
                PATH = $${path}
                !build_pass:message("Setting $${NAME} path to one of the defaults $${PATH}")
            }
        }
    } else {
        !build_pass:message("Using custom $${NAME} path $${PATH}")
    }
    !exists($${PATH}){
        !build_pass:message("The $${NAME} path $${PATH} does not exist")
    }
    return($${PATH})
}

#This function generates the command line code necessary to copy a certain file or files from src directory to dst directory
defineReplace(generateCopyDllCommand){
    fileNames = $$1
    srcDir = $$2
    dstDir = $$3

    files =
    qmake_post_link =

    #message(fileNames $$fileNames)
    #message(srcDir $$srcDir)
    #message(dstDir $$dstDir)

    for(file, fileNames){
        files += $${srcDir}/$${file}
    }
    #message(files $$files)

    #On win32 we need to replace all slash with backslash (escaped backslashes)
    win32 {
        for(file, files){
            qmake_post_link += $$quote(xcopy /Y \"$$replace(file,/,\\)\" \"$$replace(dstDir,/,\\)\"$$escape_expand(\\n\\t))
        }
    }

    #On unix we dont need to replace slashes
    unix {
        for(file, files){
            !macx:qmake_post_link += $$quote(cp -df $${file} $${dstDir}$$escape_expand(\\n\\t))
             macx:qmake_post_link += $$quote(cp -fp $${file} $${dstDir}$$escape_expand(\\n\\t))
        }
    }

    #message(qmake_post_link $${qmake_post_link})
    return($$qmake_post_link)
}

#Make compile output clean
CONFIG += silent warn_on
