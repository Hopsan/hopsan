/*!
\page page_codingconventions Hopsan Coding Conventions
The following coding conventions are to be used both in HopsanCore and HopsanGUI.

\section bracket-style Bracket Style
- For functions there shall be one line break before the first curly brace.
- For if statements, loops and similar, the starting brace shall come at the same line.
- Single line statements must always be enclosed in braces.

\b Example:

\code
int MyFunction(int a, int b)
{
    int returnValue;
    if(a > b) {
        returnValue = b-a;
    }
    else if (a == b) {
        returnValue = a+b;
    }
    else {
        returnValue = a-b;
    }
    return returnValue;
}

\endcode

\b Note! The previous (deprecated) style is still used in most of the code.
The previous style said that "There shall be one line break before all brackets."
This style can still be used if it makes the code easier to read.

\b Example:

\code
int MyFunctionWithOldBracketStyle(int a, int b)
{
    int returnValue;
    if(a > b)
    {
        returnValue = b-a;
    }
    else
    {
        returnValue = a-b;
    }
    return returnValue;
}
\endcode

Exceptions can be made for short one-line code blocks, but are generally not recommended.

\b Example:

\code
if(a > max) { a = max; }
\endcode

    
\section variables Variable Names
All code shall be self commenting. This means that non-obvious abbreviations shall be avoided. The purpose of a variable shall be well described by its name. Exceptions are component equations, where the physical denotation of the variable is to be used.

\b Correct:
-# currentTimeStep
-# distanceToCenter
-# Kc
-# rho

\b Incorrect:
-# cTimeStep
-# cTstep
-# distToC
-# distC
-# flowCoefficient
-# oilDensity

Variables begin with small letters, while every new word in the name shall be capitalized. 

\b Correct:
-# someHopsanVariable

\b Incorrect:
-# somehopsanvariable
-# SomeHopsanVariable

Certain variables shall have one or more small description letters prepended:

-# g = Global variable (can be used anywhere in program)
-# m = Member variable (can only be used in the current class)
-# p = Pointer

\e Optional:
-# v = Vector (array)
-# n = Number variable

More than one letter can be used at a time. When these letters are prepended, the first letter in the actual variable name shall be capitalized. 

\b Examples:
-# mSomeHopsanVariable   (member variable)
-# mpSomeHopsanVariable  (member pointer)
-# vpDataVariables       (vector with pointers in each element)
-# mpvDataVariables      (member pointer to vector)
-# gSomeHopsanVariable   (global variable)
-# nThreads              (variable describing "number of threads")

All global variables, member variables, pointers and number variables should have these prepended letters. An exception is made for public variables used in a data struct (public class) when its main purpose is to act as a simple data container. 

\b Example:
\code
struct Message
{
    int type;
    string text;
}
Message myMessage;
\endcode
-# myMessage.type        (will return the type id of the message)

*/
