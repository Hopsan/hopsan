/*!
\page userModelExportPage Importing/Exporting Models
\todo write this

-# \subpage simulink \n
-# \subpage fmi \n
*/

/*!
\page simulink Exporting to Simulink

Hopsan models can be exported to Simulink as S-function libraries. This is done by using an automatically generated C++ file, that can be compiled into an S-function from Matlab and linked against the HopsanCore library.

\section simulink-prerequisites Prerequisites

- Matlab/Simulink 2010a or later
- Visual C++ 2008 or Visual C++ 2010 compiler (express version works)

\section simulink-guide Step-by-step guide

\subsection simulink-step1 1. Prepare the model

First of all we must have a model to export. In this example, we want to export the "position servo" model (found in Example Models directory) and create a closed-loop controller in Simulink. The only required modifications is that we must add interface components (found in Connectivity library) wherever we want interaction between Simulink and Hopsan. In this case we want a signal input to control the valve, and a signal output from the sensor. The controller is thus removed from the Hopsan model.

\image html "simulink_model.png"
\image latex "simulink_model.png" "Prepare model for use in Simulink"

\subsection simulink-step2 2. Export source files

Next step is to export the files. Click the "Export" button and select Simulink Source Files.

\htmlimagerightcaption{export_simulink_icon.png, Export to S-function}
\image latex "export_simulink_icon.png" "Export to S-function"

A dialog appears, where you can choose version of Visual C++ and if you want 32-bit or 64-bit architecture. These settings should be chosen so that they match your version of Matlab. It is also possible to disable port graphics, for portability with older versions of Simulink. Use this setting only if Matlab gives an error message ending with "called mdlSetNumInputPorts more than once". 

When this dialog is closed, a file dialog appears. Choose an empty directory. Source files, model files and binaries will be generated and copied to this directory.

\subsection simulink-step3 3. Compile in Matlab

Open Matlab. First, make sure that the correct compiler is used. Write the following command in the console:
\verbatim
mex -setup
\endverbatim

Now select the appropriate version of Visual C++. Then change Matlab working directory to the one created in the previous step. Run the compilation script file "HopsanSimulinkCompile.m". This will create the S-function library.

\subsection simulink-step4 4. Open model in Simulink

Open Simulink and create a new model. Add an S-function block. Open the properties and choose HopsanSimulink (without file extension) as the library file. Now a Simulink block appears. The ports corresponds to the interface components in Hopsan. The DEBUG output port will give zero if everything is ok, or an error number greater than zero if something goes wrong.

Now let's add a PI-controller similar to the one we had originally in Hopsan. Also add scopes at the reference and output signals. Choose some reasonable values and check the results in the scopes.
*/

/*!
\page fmi Functional Mock-up Interface
The Functional Mock-up Interface is an free standard for exchanging simulation models between simulation tools. It is maintained by the Modelica Association and is currently supported by more than 220 simulation tools. The concept is to exchange Functional Mock-up Units (FMUs) between different programs. An FMU is a zip-file with the file ending ".fmu", containing an XML description file and a binary file (DLL in Windows or SO in Linux) with a plain C interface which the host program can link against. It can also contain graphics, documentation and source code files.

\section export-fmu Exporting a Functional Mock-up Unit
Hopsan models can be exported to FMUs by clicking on the Export to FMU button. Then choose an empty folder. All required files will be exported, compiled and compressed. Model inputs and outputs can be specified by using interface components.

\htmlimagerightcaption{export_fmu_icon.png, Export to FMU}
\image latex "export_fmu_icon.png" "Export to FMU"

\subsection export-fmu-compatibility Compatibility

Note: Hopsan uses the fmi4c library for FMI import. Compatibility for importing FMUs is thus also applicable on the fmi4c library itself.

Example FMUs exported from Hopsan are available at https://github.com/Hopsan/example-fmus/. All example FMUs have been verified with the FMU Check tool available at https://fmu-check.herokuapp.com/.

FMUs exported from Hopsan have been successfully imported and simulated in the following importing tools:

<table>
<caption id="multi_row">Compatibility with importing tools</caption>
<tr><th>tool        <th>FMI 1.0                    <th> FMI 2.0                  <th> FMI 3.0
<tr><td>Hopsan/fmi4c<td> \emoji :heavy_check_mark: <td>\emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>OMSimulator <td> \emoji :heavy_check_mark: <td>\emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>Adams       <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>AMESim      <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>Simulink    <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>PyFMI       <td>                           <td>\emoji :heavy_check_mark: <td>
</table>

\subsection export-fmu-prerequisites Prerequisites
- MinGW compiler (available in system path)

\section import-fmu Importing a Functional Mock-up Unit
FMUs from other programs (or from Hopsan itself) can be imported by clicking on the import from FMU icon. If all goes well they will appear as components in the component library. 

\htmlimagerightcaption{import_fmu_icon.png, Impohrt from FMU}
\image latex "import_fmu_icon.png" "Import from FMU"

\subsection import-fmu-compatibility Compatibility

Hopsan FMU import is validated against the Reference FMUs, available att https://github.com/modelica/Reference-FMUs. Below is the current compatibility:

<table>
<caption id="multi_row">Compatibility with reference FMUs</caption>
<tr><th>file             <th>FMI 1.0                    <th> FMI 2.0                  <th> FMI 3.0
<tr><td>BouncingBall.fmu <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>Clocks.fmu       <td> N/A                       <td> N/A                       <td> \emoji :heavy_multiplication_x:
<tr><td>Dahlquist.fmu    <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>Feedthrough.fmu  <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>Resource.fmu     <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>Stair.fmu        <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>StateSpace.fmu   <td> N/A                       <td> N/A                       <td> \emoji :heavy_multiplication_x:
<tr><td>VanDerPol.fmu    <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
</table>

FMUs from the following tools have successfully been imported and simulated in Hopsan:

<table>
<caption id="multi_row">Compatibility with FMUs exported from other tools</caption>
<tr><th>tool         <th>FMI 1.0                    <th> FMI 2.0                  <th> FMI 3.0
<tr><td>Hopsan/fmi4c <td> \emoji :heavy_check_mark: <td>\emoji :heavy_check_mark: <td> \emoji :heavy_check_mark:
<tr><td>OpenModelica <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>Dymola       <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>Simulink     <td>                           <td>\emoji :heavy_check_mark: <td>
<tr><td>LS-DYNA      <td>                           <td>\emoji :heavy_check_mark: <td>
</table>

\subsection export-fmu-prerequisites Prerequisites
- MinGW compiler (available in system path)

*/
