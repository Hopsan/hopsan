#ifndef ACTIVITYDIAGRAMMERGE_HPP_INCLUDED
#define ACTIVITYDIAGRAMMERGE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file ActivityDiagramMerge.hpp
//! @author Petter Krus <petter.krus@liu.se>
//  co-author/auditor **Not yet audited by a second person**
//! @date Thu 29 Aug 2019 14:30:46
//! @brief Merge with triggers for activity diagram
//! @ingroup ActivityDiagramComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, H:, PettersDropbox, Dropbox, HopsanComponents, StateMachine0, \
ActivityDiagram, ActivityDiagram}/ActivityDiagramMerge.nb*/

using namespace hopsan;

class ActivityDiagramMerge : public ComponentQ
{
private:
     double diffevent;
     Port *mpPpn1;
     Port *mpPpn2;
     Port *mpPpn3;
     int mNstep;
     //Port Ppn1 variable
     double spn1;
     double qpn1;
     //Port Ppn2 variable
     double spn2;
     double qpn2;
     //Port Ppn3 variable
     double spn3;
     double qpn3;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double event1;
     double event2;
     //outputVariables
     //InitialExpressions variables
     double oldEvent1;
     double oldEvent2;
     //Expressions variables
     double dEvent1;
     double dEvent2;
     //Port Ppn1 pointer
     double *mpP_spn1;
     double *mpP_qpn1;
     //Port Ppn2 pointer
     double *mpP_spn2;
     double *mpP_qpn2;
     //Port Ppn3 pointer
     double *mpP_spn3;
     double *mpP_qpn3;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpevent1;
     double *mpevent2;
     //inputParameters pointers
     double *mpdiffevent;
     //outputVariables pointers
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new ActivityDiagramMerge();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        mpPpn1=addPowerPort("Ppn1","NodePetriNet");
        mpPpn2=addPowerPort("Ppn2","NodePetriNet");
        mpPpn3=addPowerPort("Ppn3","NodePetriNet");
        //Add inputVariables to the component
            addInputVariable("event1","event 1 ","",1.,&mpevent1);
            addInputVariable("event2","event 2 ","",1.,&mpevent2);

        //Add inputParammeters to the component
            addInputVariable("diffevent", "Trigg on level (0) or flank (1)", \
"", 0.,&mpdiffevent);
        //Add outputVariables to the component

//==This code has been autogenerated using Compgen==
        //Add constantParameters
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Ppn1
        mpP_spn1=getSafeNodeDataPtr(mpPpn1, NodePetriNet::State);
        mpP_qpn1=getSafeNodeDataPtr(mpPpn1, NodePetriNet::Flow);
        //Port Ppn2
        mpP_spn2=getSafeNodeDataPtr(mpPpn2, NodePetriNet::State);
        mpP_qpn2=getSafeNodeDataPtr(mpPpn2, NodePetriNet::Flow);
        //Port Ppn3
        mpP_spn3=getSafeNodeDataPtr(mpPpn3, NodePetriNet::State);
        mpP_qpn3=getSafeNodeDataPtr(mpPpn3, NodePetriNet::Flow);

        //Read variables from nodes
        //Port Ppn1
        spn1 = (*mpP_spn1);
        qpn1 = (*mpP_qpn1);
        //Port Ppn2
        spn2 = (*mpP_spn2);
        qpn2 = (*mpP_qpn2);
        //Port Ppn3
        spn3 = (*mpP_spn3);
        qpn3 = (*mpP_qpn3);

        //Read inputVariables from nodes
        event1 = (*mpevent1);
        event2 = (*mpevent2);

        //Read inputParameters from nodes
        diffevent = (*mpdiffevent);

        //Read outputVariables from nodes

//==This code has been autogenerated using Compgen==
        //InitialExpressions
        oldEvent1 = event1;
        oldEvent2 = event2;


        //Initialize delays


        simulateOneTimestep();

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port Ppn1
        spn1 = (*mpP_spn1);
        //Port Ppn2
        spn2 = (*mpP_spn2);
        //Port Ppn3
        spn3 = (*mpP_spn3);

        //Read inputVariables from nodes
        event1 = (*mpevent1);
        event2 = (*mpevent2);

        //Read inputParameters from nodes
        diffevent = (*mpdiffevent);

        //LocalExpressions

        //Expressions
        dEvent1 = onPositive(-0.5 + event1 - diffevent*oldEvent1);
        dEvent2 = onPositive(-0.5 + event2 - diffevent*oldEvent2);
        qpn1 = -(dEvent1*onPositive(-0.5 + spn1 - spn3));
        qpn2 = -(dEvent2*onPositive(0.5 + qpn1)*onPositive(-0.5 + spn2 - \
spn3));
        qpn3 = onPositive(-0.5 + onPositive(-0.5 - qpn1) + onPositive(-0.5 - \
qpn2));
        oldEvent1 = event1;
        oldEvent2 = event2;

        //Calculate the delayed parts


        //Write new values to nodes
        //Port Ppn1
        (*mpP_qpn1)=qpn1;
        //Port Ppn2
        (*mpP_qpn2)=qpn2;
        //Port Ppn3
        (*mpP_qpn3)=qpn3;
        //outputVariables

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // ACTIVITYDIAGRAMMERGE_HPP_INCLUDED
